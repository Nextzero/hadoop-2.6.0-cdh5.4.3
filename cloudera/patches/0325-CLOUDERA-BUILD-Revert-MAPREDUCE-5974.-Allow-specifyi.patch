From 623bb2d2fcc86f8b2cc57016cf57a5789b3154e2 Mon Sep 17 00:00:00 2001
From: Robert Kanter <rkanter@cloudera.com>
Date: Fri, 30 Jan 2015 13:45:35 -0800
Subject: [PATCH 325/596] CLOUDERA-BUILD: Revert "MAPREDUCE-5974. Allow
 specifying multiple MapOutputCollectors with
 fallback. (Todd Lipcon via kasha)"

This reverts commit c9d76478263cd06a5ec53a718df1bb3a95b1ea8b.

Conflicts:
	hadoop-mapreduce-project/CHANGES.txt
---
 hadoop-mapreduce-project/CHANGES.txt               |    4 +--
 .../java/org/apache/hadoop/mapred/MapTask.java     |   37 +++++---------------
 .../src/main/resources/mapred-default.xml          |    4 +--
 .../apt/PluggableShuffleAndPluggableSort.apt.vm    |    8 ++---
 4 files changed, 13 insertions(+), 40 deletions(-)

diff --git a/hadoop-mapreduce-project/CHANGES.txt b/hadoop-mapreduce-project/CHANGES.txt
index 829188a..61ecc88 100644
--- a/hadoop-mapreduce-project/CHANGES.txt
+++ b/hadoop-mapreduce-project/CHANGES.txt
@@ -31,9 +31,6 @@ Release 2.6.0 - 2014-11-18
     MAPREDUCE-5906. Inconsistent configuration in property 
       "mapreduce.reduce.shuffle.input.buffer.percent" (Akira AJISAKA via aw)
 
-    MAPREDUCE-5974. Allow specifying multiple MapOutputCollectors with 
-    fallback. (Todd Lipcon via kasha)
-
     MAPREDUCE-5130. Add missing job config options to mapred-default.xml
     (Ray Chiang via Sandy Ryza)
 
@@ -55,6 +52,7 @@ Release 2.6.0 - 2014-11-18
     MAPREDUCE-6052. Supported overriding the default container-log4j.properties
     file per job. (Junping Du via zjshen)
 
+
   OPTIMIZATIONS
 
   BUG FIXES
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java
index 75b4141..1a67b71 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java
@@ -381,35 +381,16 @@ public Progress getSortPhase() {
   private <KEY, VALUE> MapOutputCollector<KEY, VALUE>
           createSortingCollector(JobConf job, TaskReporter reporter)
     throws IOException, ClassNotFoundException {
+    MapOutputCollector<KEY, VALUE> collector
+      = (MapOutputCollector<KEY, VALUE>)
+       ReflectionUtils.newInstance(
+                        job.getClass(JobContext.MAP_OUTPUT_COLLECTOR_CLASS_ATTR,
+                        MapOutputBuffer.class, MapOutputCollector.class), job);
+    LOG.info("Map output collector class = " + collector.getClass().getName());
     MapOutputCollector.Context context =
-      new MapOutputCollector.Context(this, job, reporter);
-
-    Class<?>[] collectorClasses = job.getClasses(
-      JobContext.MAP_OUTPUT_COLLECTOR_CLASS_ATTR, MapOutputBuffer.class);
-    int remainingCollectors = collectorClasses.length;
-    for (Class clazz : collectorClasses) {
-      try {
-        if (!MapOutputCollector.class.isAssignableFrom(clazz)) {
-          throw new IOException("Invalid output collector class: " + clazz.getName() +
-            " (does not implement MapOutputCollector)");
-        }
-        Class<? extends MapOutputCollector> subclazz =
-          clazz.asSubclass(MapOutputCollector.class);
-        LOG.debug("Trying map output collector class: " + subclazz.getName());
-        MapOutputCollector<KEY, VALUE> collector =
-          ReflectionUtils.newInstance(subclazz, job);
-        collector.init(context);
-        LOG.info("Map output collector class = " + collector.getClass().getName());
-        return collector;
-      } catch (Exception e) {
-        String msg = "Unable to initialize MapOutputCollector " + clazz.getName();
-        if (--remainingCollectors > 0) {
-          msg += " (" + remainingCollectors + " more collector(s) to try)";
-        }
-        LOG.warn(msg, e);
-      }
-    }
-    throw new IOException("Unable to initialize any output collector");
+                           new MapOutputCollector.Context(this, job, reporter);
+    collector.init(context);
+    return collector;
   }
 
   @SuppressWarnings("unchecked")
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
index 7075d7d..4b3581a 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
@@ -755,9 +755,7 @@
   <name>mapreduce.job.map.output.collector.class</name>
   <value>org.apache.hadoop.mapred.MapTask$MapOutputBuffer</value>
   <description>
-    The MapOutputCollector implementation(s) to use. This may be a comma-separated
-    list of class names, in which case the map task will try to initialize each
-    of the collectors in turn. The first to successfully initialize will be used.
+    It defines the MapOutputCollector implementation to use.
   </description>
 </property>
  
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/site/apt/PluggableShuffleAndPluggableSort.apt.vm b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/site/apt/PluggableShuffleAndPluggableSort.apt.vm
index 06d8022..1b06ca9 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/site/apt/PluggableShuffleAndPluggableSort.apt.vm
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/site/apt/PluggableShuffleAndPluggableSort.apt.vm
@@ -71,16 +71,11 @@ Hadoop MapReduce Next Generation - Pluggable Shuffle and Pluggable Sort
 *--------------------------------------+---------------------+-----------------+
 | <<<mapreduce.job.reduce.shuffle.consumer.plugin.class>>> | <<<org.apache.hadoop.mapreduce.task.reduce.Shuffle>>>         | The <<<ShuffleConsumerPlugin>>> implementation to use |
 *--------------------------------------+---------------------+-----------------+
-| <<<mapreduce.job.map.output.collector.class>>>   | <<<org.apache.hadoop.mapred.MapTask$MapOutputBuffer>>> | The <<<MapOutputCollector>>> implementation(s) to use |
+| <<<mapreduce.job.map.output.collector.class>>>   | <<<org.apache.hadoop.mapred.MapTask$MapOutputBuffer>>> | The <<<MapOutputCollector>>> implementation to use |
 *--------------------------------------+---------------------+-----------------+
 
   These properties can also be set in the <<<mapred-site.xml>>> to change the default values for all jobs.
 
-  The collector class configuration may specify a comma-separated list of collector implementations.
-  In this case, the map task will attempt to instantiate each in turn until one of the
-  implementations successfully initializes. This can be useful if a given collector
-  implementation is only compatible with certain types of keys or values, for example.
-
 ** NodeManager Configuration properties, <<<yarn-site.xml>>> in all nodes:
 
 *--------------------------------------+---------------------+-----------------+
@@ -96,3 +91,4 @@ Hadoop MapReduce Next Generation - Pluggable Shuffle and Pluggable Sort
   <<<yarn.nodemanager.aux-services>>> property, for example <<<mapred.shufflex>>>.
   Then the property defining the corresponding class must be
   <<<yarn.nodemanager.aux-services.mapreduce_shufflex.class>>>.
+  
\ No newline at end of file
-- 
1.7.9.5


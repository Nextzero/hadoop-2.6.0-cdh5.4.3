From 7a918713c1abc3a265719e466d6e332b5e291a5e Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@apache.org>
Date: Fri, 15 Mar 2013 17:42:02 +0000
Subject: [PATCH 046/596] MR1: MAPREDUCE-5070.
 TestClusterStatus.testClusterMetrics fails on JDK7.
 (tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1@1457033 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit d06219b66948d0b3dfe4dedd78a871fe0a458c14)

Author: Sandy Ryza
Ref: CDH-10971
Reason: Fix failing jdk7 tests
(cherry picked from commit ba765d68aba424946292693fce2466a56ebb7041)
(cherry picked from commit e1597c842993de51c7605f80c66fe5449b1eb85f)
(cherry picked from commit 7e794fee21ceb861c79bc67fcaa79e09a43a7500)
(cherry picked from commit ea408b81c6b2602c22862fbe9f0f6932107503ab)
---
 .../apache/hadoop/mapred/TestClusterStatus.java    |   73 +++++++++++---------
 1 file changed, 39 insertions(+), 34 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestClusterStatus.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestClusterStatus.java
index 1e35244..c9c300f 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestClusterStatus.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestClusterStatus.java
@@ -17,6 +17,8 @@
  */
 package org.apache.hadoop.mapred;
 
+import static org.junit.Assert.assertEquals;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -24,14 +26,11 @@
 import java.util.Map;
 
 import org.apache.hadoop.mapreduce.ClusterMetrics;
-import org.apache.hadoop.mapreduce.Job;
 import org.apache.hadoop.mapreduce.TaskType;
 import org.apache.hadoop.mapreduce.server.jobtracker.TaskTracker;
-
-import junit.extensions.TestSetup;
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
 
 /**
  * Class to test that ClusterMetrics are being created with the right
@@ -39,41 +38,44 @@
  * 
  * The tests exercise code paths where the counts of slots are updated.
  */
-public class TestClusterStatus extends TestCase {
+public class TestClusterStatus {
 
   private static String[] trackers = new String[] { "tracker_tracker1:1000",
       "tracker_tracker2:1000", "tracker_tracker3:1000" };
-  private static JobTracker jobTracker;
-  private static int mapSlotsPerTracker = 4;
-  private static int reduceSlotsPerTracker = 2;
-  private static MiniMRCluster mr;
-  private static JobClient client;
+  private JobTracker jobTracker;
+  private final static int mapSlotsPerTracker = 4;
+  private final static int reduceSlotsPerTracker = 2;
+  private MiniMRCluster mr;
+  private JobClient client;
   // heartbeat responseId. increment this after sending a heartbeat
-  private static short responseId = 1;
+  private short responseId;
   private static FakeJobInProgress fakeJob;
   private static FakeTaskScheduler scheduler;
   
-  public static Test suite() {
-    TestSetup setup = new TestSetup(new TestSuite(TestClusterStatus.class)) {
-      protected void setUp() throws Exception {
-        JobConf conf = new JobConf();
-        conf.setClass("mapred.jobtracker.taskScheduler", 
-            TestClusterStatus.FakeTaskScheduler.class,
-                  TaskScheduler.class);
-        mr = new MiniMRCluster(0, 0, 0, "file:///", 1, null, null, null, conf);
-        jobTracker = mr.getJobTrackerRunner().getJobTracker();
-        for (String tracker : trackers) {
-          establishFirstContact(jobTracker, tracker);
-        }
-        client = new JobClient(mr.createJobConf());
-      }
-
-      protected void tearDown() throws Exception {
-        client.close();
-        mr.shutdown();
-      }
-    };
-    return setup;
+  @Before
+  public void setUp() throws Exception {
+    responseId = 1;
+    JobConf conf = new JobConf();
+    conf.setClass("mapred.jobtracker.taskScheduler", 
+        TestClusterStatus.FakeTaskScheduler.class,
+        TaskScheduler.class);
+    mr = new MiniMRCluster(0, 0, 0, "file:///", 1, null, null, null, conf);
+    jobTracker = mr.getJobTrackerRunner().getJobTracker();
+    for (String tracker : trackers) {
+      establishFirstContact(jobTracker, tracker);
+    }
+    client = new JobClient(mr.createJobConf());
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    client.close();
+    mr.shutdown();
+    fakeJob = null;
+    scheduler = null;
+    client = null;
+    mr = null;
+    jobTracker = null;
   }
 
   /**
@@ -157,6 +159,7 @@ private TaskTrackerStatus getTTStatus(String trackerName,
       taskStatuses, 0, 0, mapSlotsPerTracker, reduceSlotsPerTracker);
   }
   
+  @Test
   public void testClusterMetrics() throws IOException, InterruptedException {
     assertEquals("tasktracker count doesn't match", trackers.length,
       client.getClusterStatus().getTaskTrackers());
@@ -256,6 +259,7 @@ private void addMapTaskAttemptToList(List<TaskStatus> list,
     list.add(ts);
   }
 
+  @Test
   public void testReservedSlots() throws IOException {
     JobConf conf = mr.createJobConf();
 
@@ -308,6 +312,7 @@ public void testReservedSlots() throws IOException {
         0, metrics.getReservedReduceSlots());
   }
   
+  @Test
   public void testClusterStatus() throws Exception {
     ClusterStatus clusterStatus = client.getClusterStatus();
     assertEquals("JobTracker used-memory is " + clusterStatus.getUsedMemory() + 
-- 
1.7.9.5


From 0b26cd165628edb1ac9876f130b78c529e853dfd Mon Sep 17 00:00:00 2001
From: Tom White <tom@cloudera.com>
Date: Wed, 30 Jan 2013 15:15:51 +0000
Subject: [PATCH 025/596] MR1: CLOUDERA-BUILD. Wait for RUNNING state when
 transitioning to active in JT HA.

Reason: Bug
Ref: CDH-10167
Author: Tom White
(cherry picked from commit 705530756051440c4a813f9d7ab5eeb550f8d2eb)
(cherry picked from commit 4aeac859afd6d60a966784f49b8a74afe3d149b7)
(cherry picked from commit 78edd3b25cc660c8a09dc04ac703f0ba67233780)
(cherry picked from commit d7966ff88a1d87a555543877d3072088ccb6806f)
---
 .../apache/hadoop/mapred/JobTrackerHADaemon.java   |   14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHADaemon.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHADaemon.java
index 50de101..b071e1f 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHADaemon.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHADaemon.java
@@ -36,6 +36,7 @@
 import org.apache.hadoop.ipc.ProtobufRpcEngine;
 import org.apache.hadoop.ipc.RPC;
 import org.apache.hadoop.ipc.WritableRpcEngine;
+import org.apache.hadoop.mapreduce.Cluster;
 import org.apache.hadoop.security.AccessControlException;
 import org.apache.hadoop.security.SecurityUtil;
 import org.apache.hadoop.security.UserGroupInformation;
@@ -205,6 +206,7 @@ public void run() {
               }
             }, JobTrackerRunner.class.getSimpleName() + "-JT");
           jtThread.start();
+          waitForRunningState();
           startedLatch.countDown();
           jtThread.join();
         } catch (Throwable t) {
@@ -217,6 +219,18 @@ public void run() {
       }
     }
 
+    private void waitForRunningState() {
+      while (jt != null && jt.getClusterStatus(false).getJobTrackerStatus()
+          != Cluster.JobTrackerStatus.RUNNING) {
+        LOG.info("Waiting for jobtracker RUNNING state");
+        try {
+          Thread.sleep(1000);
+        } catch (InterruptedException e) {
+          Thread.interrupted();
+        }
+      }
+    }
+
     /**
      * Shutdown the JT immediately in an ungraceful way. Used when it would be
      * unsafe for the JT to continue operating, e.g. during a failed HA state
-- 
1.7.9.5


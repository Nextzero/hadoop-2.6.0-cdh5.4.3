From a8080b94f74aaed1f62310f777288f6dae8e30bc Mon Sep 17 00:00:00 2001
From: Robert Kanter <rkanter@cloudera.com>
Date: Wed, 23 Apr 2014 16:53:40 -0700
Subject: [PATCH 131/596] MR1: CLOUDERA-BUILD. CDH-18781. Counter limits
 always use defaults even if JobClient is given a
 different Configuration

(cherry picked from commit 3f3e218704089ac83f7b993a7079406e3bd52884)
(cherry picked from commit 50a69572e849addf9d9d208aeab483a26b7b20fb)
---
 .../mapred/org/apache/hadoop/mapred/Counters.java  |    2 +-
 .../mapred/org/apache/hadoop/mapred/JobClient.java |    2 +
 .../apache/hadoop/mapreduce/counters/Limits.java   |   82 +++++++++++++++-----
 .../org/apache/hadoop/mapreduce/TestCounters.java  |    8 +-
 4 files changed, 71 insertions(+), 23 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Counters.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Counters.java
index c16607a..fa431fd 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Counters.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Counters.java
@@ -68,7 +68,7 @@
 public class Counters
     extends AbstractCounters<Counters.Counter, Counters.Group> {
   
-  public static int MAX_COUNTER_LIMIT = Limits.COUNTERS_MAX;
+  public static int MAX_COUNTER_LIMIT = Limits.getCountersMax();
   
   public Counters() {
     super(groupFactory);
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobClient.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobClient.java
index 240dcfd..f800eb3 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobClient.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobClient.java
@@ -68,6 +68,7 @@
 import org.apache.hadoop.mapred.Counters.Counter;
 import org.apache.hadoop.mapred.Counters.Group;
 import org.apache.hadoop.mapred.QueueManager.QueueACL;
+import org.apache.hadoop.mapreduce.counters.Limits;
 import org.apache.hadoop.mapreduce.InputFormat;
 import org.apache.hadoop.mapreduce.InputSplit;
 import org.apache.hadoop.mapreduce.JobContext;
@@ -526,6 +527,7 @@ public JobClient(Configuration conf) throws IOException {
    */
   public void init(JobConf conf) throws IOException {
     setConf(conf);
+    Limits.init(conf);
     String tracker = conf.get("mapred.job.tracker", "local");
     tasklogtimeout = conf.getInt(
       TASKLOG_PULL_TIMEOUT_KEY, DEFAULT_TASKLOG_TIMEOUT);
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/counters/Limits.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/counters/Limits.java
index 597b01b..23d769b 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/counters/Limits.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/counters/Limits.java
@@ -20,46 +20,91 @@
 
 import org.apache.hadoop.classification.InterfaceAudience;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.mapred.JobConf;
+
 import static org.apache.hadoop.mapreduce.MRJobConfig.*;
 
 @InterfaceAudience.Private
 public class Limits {
 
-  static final Configuration conf = new Configuration();
-  public static final int GROUP_NAME_MAX =
-      conf.getInt(COUNTER_GROUP_NAME_MAX_KEY, COUNTER_GROUP_NAME_MAX_DEFAULT);
-  public static final int COUNTER_NAME_MAX =
-      conf.getInt(COUNTER_NAME_MAX_KEY, COUNTER_NAME_MAX_DEFAULT);
-  public static final int GROUPS_MAX =
-      conf.getInt(COUNTER_GROUPS_MAX_KEY, COUNTER_GROUPS_MAX_DEFAULT);
-  // mapreduce.job.counters.limit is deprecated in favor of
-  // mapreduce.job.counters.max in Hadoop 2 so we support both here
-  public static final int COUNTERS_MAX =
-      conf.getInt(COUNTERS_MAX_KEY,
-        conf.getInt("mapreduce.job.counters.limit", COUNTERS_MAX_DEFAULT));
+  static final Configuration conf = new JobConf();
 
   private int totalCounters;
   private LimitExceededException firstViolation;
 
+  private static boolean isInited;
+
+  private static int GROUP_NAME_MAX;
+  private static int COUNTER_NAME_MAX;
+  private static int GROUPS_MAX;
+  private static int COUNTERS_MAX;
+
+  public synchronized static void init(Configuration conf) {
+    if (!isInited) {
+      if (conf == null) {
+        conf = new JobConf();
+      }
+      GROUP_NAME_MAX = conf.getInt(COUNTER_GROUP_NAME_MAX_KEY,
+          COUNTER_GROUP_NAME_MAX_DEFAULT);
+      COUNTER_NAME_MAX = conf.getInt(COUNTER_NAME_MAX_KEY,
+          COUNTER_NAME_MAX_DEFAULT);
+      GROUPS_MAX = conf.getInt(COUNTER_GROUPS_MAX_KEY, COUNTER_GROUPS_MAX_DEFAULT);
+      // mapreduce.job.counters.limit is deprecated in favor of
+      // mapreduce.job.counters.max in Hadoop 2 so we support both here
+      COUNTERS_MAX = conf.getInt(COUNTERS_MAX_KEY,
+          conf.getInt("mapreduce.job.counters.limit", COUNTERS_MAX_DEFAULT));
+    }
+    isInited = true;
+  }
+
+  public static int getGroupNameMax() {
+    if (!isInited) {
+      init(null);
+    }
+    return GROUP_NAME_MAX;
+  }
+
+  public static int getCounterNameMax() {
+    if (!isInited) {
+      init(null);
+    }
+    return COUNTER_NAME_MAX;
+  }
+
+  public static int getGroupsMax() {
+    if (!isInited) {
+      init(null);
+    }
+    return GROUPS_MAX;
+  }
+
+  public static int getCountersMax() {
+    if (!isInited) {
+      init(null);
+    }
+    return COUNTERS_MAX;
+  }
+
   public static String filterName(String name, int maxLen) {
     return name.length() > maxLen ? name.substring(0, maxLen - 1) : name;
   }
 
   public static String filterCounterName(String name) {
-    return filterName(name, COUNTER_NAME_MAX);
+    return filterName(name, getCounterNameMax());
   }
 
   public static String filterGroupName(String name) {
-    return filterName(name, GROUP_NAME_MAX);
+    return filterName(name, getGroupNameMax());
   }
 
   public synchronized void checkCounters(int size) {
     if (firstViolation != null) {
       throw new LimitExceededException(firstViolation);
     }
-    if (size > COUNTERS_MAX) {
+    int countersMax = getCountersMax();
+    if (size > countersMax) {
       firstViolation = new LimitExceededException("Too many counters: "+ size +
-                                                  " max="+ COUNTERS_MAX);
+                                                  " max="+ countersMax);
       throw firstViolation;
     }
   }
@@ -73,9 +118,10 @@ public synchronized void checkGroups(int size) {
     if (firstViolation != null) {
       throw new LimitExceededException(firstViolation);
     }
-    if (size > GROUPS_MAX) {
+    int groupsMax = getGroupsMax();
+    if (size > groupsMax) {
       firstViolation = new LimitExceededException("Too many counter groups: "+
-                                                  size +" max="+ GROUPS_MAX);
+                                                  size +" max="+ groupsMax);
     }
   }
 
diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestCounters.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestCounters.java
index ccdf516..9c69d3b 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestCounters.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestCounters.java
@@ -78,8 +78,8 @@ public void testCounterValue() {
   static final long FS_COUNTER_VALUE = 10;
 
   private void testMaxCounters(final Counters counters) {
-    LOG.info("counters max="+ Limits.COUNTERS_MAX);
-    for (int i = 0; i < Limits.COUNTERS_MAX; ++i) {
+    LOG.info("counters max="+ Limits.getCountersMax());
+    for (int i = 0; i < Limits.getCountersMax(); ++i) {
       counters.findCounter("test", "test"+ i);
     }
     setExpected(counters);
@@ -92,8 +92,8 @@ public void run() {
   }
 
   private void testMaxGroups(final Counters counters) {
-    LOG.info("counter groups max="+ Limits.GROUPS_MAX);
-    for (int i = 0; i < Limits.GROUPS_MAX; ++i) {
+    LOG.info("counter groups max="+ Limits.getGroupsMax());
+    for (int i = 0; i < Limits.getGroupsMax(); ++i) {
       // assuming COUNTERS_MAX > GROUPS_MAX
       counters.findCounter("test"+ i, "test");
     }
-- 
1.7.9.5


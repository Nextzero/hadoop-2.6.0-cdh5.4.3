From 0ead97b930b636c7032f26294bdc7c658862dfaa Mon Sep 17 00:00:00 2001
From: Karthik Kambatla <kasha@cloudera.com>
Date: Mon, 24 Nov 2014 17:31:57 -0800
Subject: [PATCH 155/596] Revert "MR1: CDH-22440. JT HA should survive HDFS
 restarts"

This reverts commit e4170054ec7389d3a04a85e5a13650f3ed473952.

(cherry picked from commit 8046232e6e2638392c060b24adc585956e7a7d42)
---
 .../hadoop/mapred/JobTrackerHAServiceProtocol.java |   38 ++++++++------------
 1 file changed, 15 insertions(+), 23 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHAServiceProtocol.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHAServiceProtocol.java
index 8f9c80e..bda2c4c 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHAServiceProtocol.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobTrackerHAServiceProtocol.java
@@ -98,8 +98,7 @@ public void run() {
               " no longer exists. New active has started.");
         }
       } catch (Throwable t) {
-        LOG.fatal("Error checking system directory.", t);
-        transitionToStandby(true);
+        doImmediateShutdown(t);
       }
     }
   }
@@ -140,9 +139,7 @@ public void transitionToActive(StateChangeRequestInfo reqInfo)
       
       jtRunner.startJobTracker(jtConf);
     } catch (Throwable t) {
-      LOG.fatal("Unable to transition to active", t);
-      transitionToStandby(true);
-      return;
+      doImmediateShutdown(t);
     }
     long activeCheckMillis = conf.getLong(HAUtil.MR_HA_ACTIVE_CHECK_MILLIS,
         HAUtil.MR_HA_ACTIVE_CHECK_MILLIS_DEFAULT);
@@ -220,12 +217,9 @@ private String createSysDirName(long counter) {
     return SYSTEM_DIR_SEQUENCE_PREFIX + paddedCounter;
   }
 
-  /**
-   * Helper method to transition the JT to standby. This is to be invoked
-   * either by {@link #transitionToActive(StateChangeRequestInfo)},
-   * or when we encounter a FATAL issue in an HA setting.
-   */
-  private synchronized void transitionToStandby(boolean startRedirector) {
+  @Override
+  public void transitionToStandby(StateChangeRequestInfo reqInfo)
+      throws ServiceFailedException, AccessControlException, IOException {
     if (haState == HAServiceState.STANDBY) {
       LOG.info("Already in standby state.");
       return;
@@ -236,9 +230,7 @@ private synchronized void transitionToStandby(boolean startRedirector) {
         sysDirMonitorExecutor.shutdownNow();
       }
       jtRunner.stopJobTracker();
-      if (startRedirector) {
-        httpRedirector.start();
-      }
+      httpRedirector.start();
     } catch (Throwable t) {
       doImmediateShutdown(t);
     }
@@ -247,21 +239,21 @@ private synchronized void transitionToStandby(boolean startRedirector) {
     haState = HAServiceState.STANDBY;
     LOG.info("Transitioned to standby");
   }
-
-  @Override
-  public void transitionToStandby(StateChangeRequestInfo reqInfo)
-      throws ServiceFailedException, AccessControlException, IOException {
-    transitionToStandby(true);
-  }
   
   public void stop() {
     LOG.info("Stopping");
-    transitionToStandby(false);
     try {
+      if (sysDirMonitorExecutor != null) {
+        sysDirMonitorExecutor.shutdownNow();
+      }
+      jtRunner.stopJobTracker();
       httpRedirector.stop();
-    } catch (Exception e) {
-      LOG.fatal("Error stopping HTTP Redirector. Stopping anyway.", e);
+    } catch (Throwable t) {
+      doImmediateShutdown(t);
     }
+    sysDirMonitorExecutor = null;
+    currentSysDir = null;
+    haState = HAServiceState.STANDBY;
     LOG.info("Stopped");
   }
   
-- 
1.7.9.5


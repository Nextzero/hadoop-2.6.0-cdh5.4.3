From 992e2f3d465a5457aae834725d4528d08824abef Mon Sep 17 00:00:00 2001
From: "adhoot@cloudera.com" <adhoot@adhoot-MBP.local>
Date: Mon, 28 Jul 2014 14:30:23 -0700
Subject: [PATCH 138/596] MR1: MAPREDUCE-5966. MR1 FairScheduler use of custom
 weight adjuster is not thread safe for comparisons.
 (Anubhav Dhoot via kasha)

(cherry picked from commit e43ed1748cee4599ff5c93b4c78abd9efb08fa8e)
(cherry picked from commit e3ec2519ad912f3318a6458e0b73a03ffe3fabf1)
---
 .../org/apache/hadoop/mapred/FairScheduler.java    |    5 +-
 .../org/apache/hadoop/mapred/JobSchedulable.java   |   17 ++++--
 .../org/apache/hadoop/mapred/PoolSchedulable.java  |   16 +++++-
 .../java/org/apache/hadoop/mapred/Schedulable.java |    5 +-
 .../org/apache/hadoop/mapred/FakeSchedulable.java  |    3 ++
 .../apache/hadoop/mapred/TestFairScheduler.java    |   57 +++++++++++++++++---
 6 files changed, 89 insertions(+), 14 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java
index 3cd073e..817a0b4 100644
--- a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java
+++ b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java
@@ -677,10 +677,13 @@ protected void update() {
 
         updateRunnability(); // Set job runnability based on user/pool limits 
 
-        // Update demands of jobs and pools
+        // Update demands and weights of jobs and pools
         for (Pool pool: poolMgr.getPools()) {
           pool.getMapSchedulable().updateDemand();
           pool.getReduceSchedulable().updateDemand();
+
+          pool.getMapSchedulable().updateWeight();
+          pool.getReduceSchedulable().updateWeight();
         }
 
         // Compute fair shares based on updated demands
diff --git a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/JobSchedulable.java b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/JobSchedulable.java
index b3941a6..f5f1fa5 100644
--- a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/JobSchedulable.java
+++ b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/JobSchedulable.java
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.util.Collection;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.hadoop.mapred.FairScheduler.JobInfo;
 import org.apache.hadoop.mapreduce.TaskType;
@@ -29,6 +30,7 @@
   private JobInProgress job;
   private TaskType taskType;
   private int demand = 0;
+  private double weight = 1.0;
 
   public JobSchedulable(FairScheduler scheduler, JobInProgress job, 
       TaskType taskType) {
@@ -38,7 +40,10 @@ public JobSchedulable(FairScheduler scheduler, JobInProgress job,
     
     initMetrics();
   }
-  
+
+  public JobSchedulable() {
+  }
+
   @Override
   public TaskType getTaskType() {
     return taskType;
@@ -117,9 +122,14 @@ public long getStartTime() {
   
   @Override
   public double getWeight() {
-    return scheduler.getJobWeight(job, taskType);
+    return weight;
   }
-  
+
+  @Override
+  public void updateWeight() {
+    weight = scheduler.getJobWeight(job, taskType);
+  }
+
   @Override
   public int getMinShare() {
     return 0;
@@ -150,7 +160,6 @@ public Task assignTask(TaskTrackerStatus tts, long currentTime,
     }
   }
 
-  
   @Override
   protected String getMetricsContextName() {
     return "jobs";
diff --git a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/PoolSchedulable.java b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/PoolSchedulable.java
index b782ecd..a290bed 100644
--- a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/PoolSchedulable.java
+++ b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/PoolSchedulable.java
@@ -95,7 +95,18 @@ public void updateDemand() {
           + "; maxTasks is " + maxTasks);
     }
   }
-  
+
+  /**
+   * Ask jobs in the pool to update weights. Its own weight is computed on
+   * the fly
+   */
+  @Override
+  public void updateWeight() {
+    for (JobSchedulable sched: jobScheds) {
+      sched.updateWeight();
+    }
+  }
+
   /**
    * Distribute the pool's fair share among its jobs
    */
@@ -160,6 +171,9 @@ public Task assignTask(TaskTrackerStatus tts, long currentTime,
     } else {
       throw new RuntimeException("Unsupported pool scheduling mode " + mode);
     }
+    for (JobSchedulable sched: jobScheds) {
+      sched.updateWeight();
+    }
     Collections.sort(jobScheds, comparator);
     for (JobSchedulable sched: jobScheds) {
       Task task = sched.assignTask(tts, currentTime, visited);
diff --git a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/Schedulable.java b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/Schedulable.java
index bb36e39..df9c880 100644
--- a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/Schedulable.java
+++ b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/Schedulable.java
@@ -95,7 +95,10 @@
   
   /** Refresh the Schedulable's demand and those of its children if any. */
   public abstract void updateDemand();
-  
+
+  /** Refresh the Schedulable's weight and those of its children if any */
+  public abstract void updateWeight();
+
   /** 
    * Distribute the fair share assigned to this Schedulable among its 
    * children (used in pools where the internal scheduler is fair sharing). 
diff --git a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/FakeSchedulable.java b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/FakeSchedulable.java
index a615c4f..7a28cc5 100644
--- a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/FakeSchedulable.java
+++ b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/FakeSchedulable.java
@@ -109,6 +109,9 @@ public void redistributeShare() {}
   public void updateDemand() {}
 
   @Override
+  public void updateWeight() {}
+
+  @Override
   public TaskType getTaskType() {
     return TaskType.MAP;
   }
diff --git a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java
index 1757adf..8e6711c 100644
--- a/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java
+++ b/hadoop-mapreduce1-project/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java
@@ -31,8 +31,10 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Random;
 import java.util.Set;
 import java.util.TreeMap;
+import java.util.concurrent.LinkedBlockingDeque;
 
 import junit.framework.TestCase;
 
@@ -2910,8 +2912,6 @@ private void verifyPoolMetrics() {
     
   }
 
-
-
   class TestJobSchedulableSort extends JobSchedulable {
 
     private final double testFairShare;
@@ -2972,10 +2972,6 @@ public long getStartTime() {
 
   public void testFairShareComparator()
   {
-    List<TestJobSchedulableSort> jobs = new ArrayList<TestJobSchedulableSort>();
-    final int iterations = 100;
-    int jobCount = 100;
-
     Comparator<Schedulable> comparator = new
         SchedulingAlgorithms.FairShareComparator();
 
@@ -3004,7 +3000,54 @@ public void testFairShareComparator()
     // s3 has a higher running task to weight ratio (infinity)
     assertTrue(comparator.compare(s1, s3) < 0);
   }
-  
+
+  /**
+   * This test verifies that sorting of JobSchedulables with a custom
+   * weightadjuster that returns different values when called does not break
+   * the sorting. If the weight changes during the sort,
+   * the sort would fail in jdk7
+   */
+  public void testJobSchedulableSortingWithCustomWeightAdjuster() throws
+      IOException, InterruptedException {
+    final int iterations = 100, jobCount = 100, racks = 100, nodesPerRack = 2;
+    final int totalTaskTrackers = nodesPerRack * racks;
+
+    setUpCluster(racks, nodesPerRack, true);
+
+    scheduler.weightAdjuster = new WeightAdjuster() {
+      Random r = new Random();
+
+      @Override
+      public double adjustWeight(JobInProgress job, TaskType taskType, double
+          curWeight) {
+        return curWeight * r.nextInt(100);
+      }
+    };
+
+    for (int j = 0; j < jobCount; j++) {
+      advanceTime(100);
+      submitJob(JobStatus.RUNNING, 2 * iterations, iterations);
+      scheduler.updateMetrics();
+    }
+
+    final LinkedBlockingDeque<Task> tasks =
+        new LinkedBlockingDeque<Task>();
+
+    final String taskTrackerNamePrefix = "tt";
+
+    Random r1 = new Random();
+    for (int i = 0; i < iterations; i++) {
+
+      int randomTaskTrackerId = r1.nextInt(totalTaskTrackers) + 1;
+      String taskTrackerName = taskTrackerNamePrefix + randomTaskTrackerId;
+      List<Task> assignedTasks = scheduler.assignTasks(tracker
+          (taskTrackerName));
+      if (assignedTasks != null) {
+        tasks.addAll(assignedTasks);
+      }
+    }
+  }
+
   /**
    * Verify that the job-level metrics match internal data
    */
-- 
1.7.9.5


From a090420cad73360e0c02f498207658a942a81da1 Mon Sep 17 00:00:00 2001
From: Tom White <tom@cloudera.com>
Date: Thu, 14 Feb 2013 11:12:37 +0000
Subject: [PATCH 034/596] MR1: CLOUDERA-BUILD. JT HA: job is not recovered
 when jt transitions to active then to standby and
 then to active (follow up)

Reason: Bug
Ref: CDH-10365
Author: Tom White
(cherry picked from commit 223ecad2d71ac6ebe38b311bb3cd62cb291874b1)
(cherry picked from commit a81c102f737a9a120d3cfdf2cbec50252d124460)
(cherry picked from commit 7c57f535f005ed2016ae11747e9543dd5d860270)
(cherry picked from commit ae7c67e6bd4034fc61ebc948181ffabf4a34a27d)
---
 .../mapred/EagerTaskInitializationListener.java    |   14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/EagerTaskInitializationListener.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/EagerTaskInitializationListener.java
index 00ce9d9..e79cbdf 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/EagerTaskInitializationListener.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/EagerTaskInitializationListener.java
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -38,6 +39,7 @@
 class EagerTaskInitializationListener extends JobInProgressListener {
   
   private static final int DEFAULT_NUM_THREADS = 4;
+  private static final int DEFAULT_SHUTDOWN_TIMEOUT = 15000;
   private static final Log LOG = LogFactory.getLog(
       EagerTaskInitializationListener.class.getName());
   
@@ -64,6 +66,15 @@ public void run() {
       }
       LOG.info("Shutting down thread pool");
       threadPool.shutdown();
+      try {
+        boolean completed = threadPool.awaitTermination(shutdownTimeout,
+            TimeUnit.MILLISECONDS);
+        if (!completed) {
+          threadPool.shutdownNow();
+        }
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt(); // restore interrupted flag
+      }
     }
   }
   
@@ -85,10 +96,13 @@ public void run() {
   private List<JobInProgress> jobInitQueue = new ArrayList<JobInProgress>();
   private ExecutorService threadPool;
   private int numThreads;
+  private long shutdownTimeout;
   private TaskTrackerManager ttm;
   
   public EagerTaskInitializationListener(Configuration conf) {
     numThreads = conf.getInt("mapred.jobinit.threads", DEFAULT_NUM_THREADS);
+    shutdownTimeout = conf.getInt("mapred.jobinit.shutdown.timeout.millis",
+        DEFAULT_SHUTDOWN_TIMEOUT);
     threadPool = Executors.newFixedThreadPool(numThreads);
   }
   
-- 
1.7.9.5


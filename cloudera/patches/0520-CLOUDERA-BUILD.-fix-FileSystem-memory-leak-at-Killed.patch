From 86daf3f4e55017217274bdf4e32d6e3c85082a66 Mon Sep 17 00:00:00 2001
From: Zhihai Xu <zxu@cloudera.com>
Date: Wed, 11 Mar 2015 11:40:16 -0700
Subject: [PATCH 520/596] CLOUDERA-BUILD. fix FileSystem memory leak at
 KilledHistoryService

(cherry picked from commit e25552098ed06f95c00668a31d37e9d363b28463)
(cherry picked from commit 66b265eed24360834c850726e1ffc40e29695754)
---
 .../mapreduce/v2/hs/KilledHistoryService.java      |   57 +++++++++++++-------
 1 file changed, 37 insertions(+), 20 deletions(-)

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/KilledHistoryService.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/KilledHistoryService.java
index 3e95051..9db0aad 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/KilledHistoryService.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/KilledHistoryService.java
@@ -125,20 +125,39 @@ public void run() {
                 ugi.doAs(new PrivilegedExceptionAction<Void>() {
                   @Override
                   public Void run() throws IOException {
-                    JobIndexInfo jobIndexInfo =
-                        buildJobIndexInfo(inSummaryFile, jobId, user);
-                    String historyFilename =
-                        FileNameIndexUtils.getDoneFileName(jobIndexInfo);
-                    copy(JobHistoryUtils
-                        .getStagingConfFile(stagingDirForJob, jobId, attempt),
-                             new Path(intermediateDir, JobHistoryUtils
-                                 .getIntermediateConfFileName(jobId)));
-                    copy(inSummaryFile, new Path(intermediateDir,
-                        JobHistoryUtils.getIntermediateSummaryFileName(jobId)));
-                    copy(JobHistoryUtils
-                        .getStagingJobHistoryFile(stagingDirForJob, jobId,
-                            attempt), new Path(intermediateDir, historyFilename));
-                    return null;
+                    FileSystem fromFs = null;
+                    FileSystem toFs = null;
+                    try {
+                      fromFs = stagingDirForJob.getFileSystem(conf);
+                      toFs = intermediateDir.getFileSystem(conf);
+                      JobIndexInfo jobIndexInfo =
+                          buildJobIndexInfo(fromFs, inSummaryFile, jobId,
+                              user);
+                      String historyFilename =
+                          FileNameIndexUtils.getDoneFileName(jobIndexInfo);
+                      copy(fromFs, toFs, JobHistoryUtils.getStagingConfFile(
+                          stagingDirForJob, jobId, attempt),
+                          new Path(intermediateDir, JobHistoryUtils
+                              .getIntermediateConfFileName(jobId)));
+                      copy(fromFs, toFs, inSummaryFile,
+                          new Path(intermediateDir, JobHistoryUtils
+                              .getIntermediateSummaryFileName(jobId)));
+                      copy(fromFs, toFs, JobHistoryUtils
+                          .getStagingJobHistoryFile(stagingDirForJob,
+                              jobId, attempt),
+                          new Path(intermediateDir, historyFilename));
+                      return null;
+                    } finally {
+                      // Close the FileSystem created by the new proxy user,
+                      // So that we don't leave an entry in the FileSystem cache.
+                      // Also FileSystem close is idempotent
+                      if (fromFs != null) {
+                        fromFs.close();
+                      }
+                      if (toFs != null) {
+                        toFs.close();
+                      }
+                    }
                   }
                 });
                 failDirFS.delete(flagFileStatus.getPath(), false);
@@ -175,9 +194,8 @@ private void removeFlagFileWithMessage(FileSystem failDirFS, Path flagFile,
       }
     }
 
-    private void copy(Path fromPath, Path toPath) throws IOException {
-      FileSystem fromFs = fromPath.getFileSystem(conf);
-      FileSystem toFs = toPath.getFileSystem(conf);
+    private void copy(FileSystem fromFs, FileSystem toFs, Path fromPath,
+        Path toPath) throws IOException {
       LOG.info("Copying " + fromPath.toString() + " to " + toPath.toString());
       boolean copied = FileUtil.copy(toFs, fromPath, fromFs, toPath,
           false, conf);
@@ -190,9 +208,8 @@ private void copy(Path fromPath, Path toPath) throws IOException {
           JobHistoryUtils.HISTORY_INTERMEDIATE_FILE_PERMISSIONS));
     }
 
-    private JobIndexInfo buildJobIndexInfo(Path summaryFile, JobId jobId,
-        String user) throws IOException {
-      FileSystem fs = summaryFile.getFileSystem(conf);
+    private JobIndexInfo buildJobIndexInfo(FileSystem fs, Path summaryFile,
+        JobId jobId, String user) throws IOException {
       FSDataInputStream in = fs.open(summaryFile);
       String summaryString = in.readUTF();
       in.close();
-- 
1.7.9.5


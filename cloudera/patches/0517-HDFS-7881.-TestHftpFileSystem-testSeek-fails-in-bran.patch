From 36e19acf6964d79aa9dac6262a30b92ad46a6d6a Mon Sep 17 00:00:00 2001
From: Akira Ajisaka <aajisaka@apache.org>
Date: Tue, 24 Mar 2015 06:21:14 +0900
Subject: [PATCH 517/596] HDFS-7881. TestHftpFileSystem#testSeek fails in
 branch-2. Contributed by Brahma Reddy Battula.

(cherry picked from commit fad8c78173c4b7c55324033720f04a09943deac7)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
---
 .../hadoop/hdfs/web/ByteRangeInputStream.java      |   38 ++++++++++++++++----
 1 file changed, 32 insertions(+), 6 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/ByteRangeInputStream.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/ByteRangeInputStream.java
index 395c9f6..9e3b29a 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/ByteRangeInputStream.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/ByteRangeInputStream.java
@@ -28,6 +28,7 @@
 
 import org.apache.commons.io.input.BoundedInputStream;
 import org.apache.hadoop.fs.FSInputStream;
+import org.apache.http.HttpStatus;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.net.HttpHeaders;
@@ -127,12 +128,7 @@ protected InputStream openInputStream() throws IOException {
       fileLength = null;
     } else {
       // for non-chunked transfer-encoding, get content-length
-      final String cl = connection.getHeaderField(HttpHeaders.CONTENT_LENGTH);
-      if (cl == null) {
-        throw new IOException(HttpHeaders.CONTENT_LENGTH + " is missing: "
-            + headers);
-      }
-      final long streamlength = Long.parseLong(cl);
+      long streamlength = getStreamLength(connection, headers);
       fileLength = startPos + streamlength;
 
       // Java has a bug with >2GB request streams.  It won't bounds check
@@ -143,6 +139,36 @@ protected InputStream openInputStream() throws IOException {
     return in;
   }
 
+  private static long getStreamLength(HttpURLConnection connection,
+      Map<String, List<String>> headers) throws IOException {
+    String cl = connection.getHeaderField(HttpHeaders.CONTENT_LENGTH);
+    if (cl == null) {
+      // Try to get the content length by parsing the content range
+      // because HftpFileSystem does not return the content length
+      // if the content is partial.
+      if (connection.getResponseCode() == HttpStatus.SC_PARTIAL_CONTENT) {
+        cl = connection.getHeaderField(HttpHeaders.CONTENT_RANGE);
+        return getLengthFromRange(cl);
+      } else {
+        throw new IOException(HttpHeaders.CONTENT_LENGTH + " is missing: "
+            + headers);
+      }
+    }
+    return Long.parseLong(cl);
+  }
+
+  private static long getLengthFromRange(String cl) throws IOException {
+    try {
+
+      String[] str = cl.substring(6).split("[-/]");
+      return Long.parseLong(str[1]) - Long.parseLong(str[0]) + 1;
+    } catch (Exception e) {
+      throw new IOException(
+          "failed to get content length by parsing the content range: " + cl
+              + " " + e.getMessage());
+    }
+  }
+
   private static boolean isChunkedTransferEncoding(
       final Map<String, List<String>> headers) {
     return contains(headers, HttpHeaders.TRANSFER_ENCODING, "chunked")
-- 
1.7.9.5


From 90255bf138271f5391193df0e15ecf4d19a581f7 Mon Sep 17 00:00:00 2001
From: Yongjun Zhang <yzhang@cloudera.com>
Date: Tue, 21 Apr 2015 13:43:02 -0700
Subject: [PATCH 557/596] HDFS-7312. Update DistCp v1 to optionally not use
 tmp location. (Joseph Prosser via yzhangal)

(cherry-picked from commit 22543d34bc5ca83c242fae075d42d705a4c0c34d)
---
 .../test/org/apache/hadoop/fs/TestCopyFiles.java   |  414 +++++++++++++-------
 .../src/tools/org/apache/hadoop/tools/DistCp.java  |   62 +--
 2 files changed, 314 insertions(+), 162 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/fs/TestCopyFiles.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/fs/TestCopyFiles.java
index c195a33..e253191 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/fs/TestCopyFiles.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/fs/TestCopyFiles.java
@@ -310,8 +310,26 @@ public void testCopyFromLocalToLocalUsingRelativePathName() throws Exception {
     deldir(localfs, TEST_ROOT_DIR+"/srcdat");
   }
 
-  /** copy files from dfs file system to dfs file system */
-  public void testCopyFromDfsToDfs() throws Exception {
+  private static void addToArgList(List<String> argList, final String... args) {
+	for (String arg : args) {
+	  argList.add(arg);
+	}
+  }
+  
+  private void addSrcDstToArgList(List<String> argList, final boolean skipTmp,
+      final String dst, final String... srcs) {
+    if (skipTmp) {
+      argList.add("-skiptmp");
+    }
+    addToArgList(argList, srcs);
+    argList.add(dst);
+  }
+
+  /**
+   * copy files from dfs file system to dfs file system Pass option to use
+   * -skiptmp flag
+   */
+  private void testCopyFromDfsToDfs(boolean skipTmp) throws Exception {
     String namenode = null;
     MiniDFSCluster cluster = null;
     try {
@@ -321,24 +339,37 @@ public void testCopyFromDfsToDfs() throws Exception {
       namenode = FileSystem.getDefaultUri(conf).toString();
       if (namenode.startsWith("hdfs://")) {
         MyFile[] files = createFiles(URI.create(namenode), "/srcdat");
-        ToolRunner.run(new DistCp(conf), new String[] {
-                                         "-log",
-                                         namenode+"/logs",
-                                         namenode+"/srcdat",
-                                         namenode+"/destdat"});
+        List<String> argList = new ArrayList<String>();
+        addToArgList(argList, "-log", namenode + "/logs");
+        addSrcDstToArgList(argList, skipTmp, namenode + "/destdat", namenode
+            + "/srcdat");
+        ToolRunner.run(new DistCp(conf),
+            argList.toArray(new String[argList.size()]));
         assertTrue("Source and destination directories do not match.",
-                   checkFiles(hdfs, "/destdat", files));
-        FileSystem fs = FileSystem.get(URI.create(namenode+"/logs"), conf);
+            checkFiles(hdfs, "/destdat", files));
+        FileSystem fs = FileSystem.get(URI.create(namenode + "/logs"), conf);
         assertTrue("Log directory does not exist.",
-                   fs.exists(new Path(namenode+"/logs")));
+            fs.exists(new Path(namenode + "/logs")));
         deldir(hdfs, "/destdat");
         deldir(hdfs, "/srcdat");
         deldir(hdfs, "/logs");
       }
     } finally {
-      if (cluster != null) { cluster.shutdown(); }
+      if (cluster != null) {
+        cluster.shutdown();
+      }
     }
   }
+
+  /** copy files from dfs file system to dfs file system */
+  public void testCopyFromDfsToDfs() throws Exception {
+    testCopyFromDfsToDfs(false);
+  }
+
+  /** copy files from dfs file system to dfs file system with skiptmp */
+  public void testCopyFromDfsToDfsWithSkiptmp() throws Exception {
+    testCopyFromDfsToDfs(true);
+  }
   
   /** copy files from local file system to dfs file system */
   public void testCopyFromLocalToDfs() throws Exception {
@@ -364,7 +395,9 @@ public void testCopyFromLocalToDfs() throws Exception {
         deldir(FileSystem.get(LOCAL_FS_URI, conf), TEST_ROOT_DIR+"/srcdat");
       }
     } finally {
-      if (cluster != null) { cluster.shutdown(); }
+      if (cluster != null) {
+        cluster.shutdown();
+      }
     }
   }
 
@@ -432,7 +465,8 @@ public void testDeleteLocal() throws Exception {
     }
   }
 
-  public void testCopyDfsToDfsUpdateOverwrite() throws Exception {
+  private void testCopyDfsToDfsUpdateOverwrite(boolean skipTmp)
+      throws Exception {
     MiniDFSCluster cluster = null;
     try {
       Configuration conf = new Configuration();
@@ -441,75 +475,86 @@ public void testCopyDfsToDfsUpdateOverwrite() throws Exception {
       final String namenode = hdfs.getUri().toString();
       if (namenode.startsWith("hdfs://")) {
         MyFile[] files = createFiles(URI.create(namenode), "/srcdat");
-        ToolRunner.run(new DistCp(conf), new String[] {
-                                         "-p",
-                                         "-log",
-                                         namenode+"/logs",
-                                         namenode+"/srcdat",
-                                         namenode+"/destdat"});
+        // run without update
+        List<String> argList = new ArrayList<String>();
+        addToArgList(argList, "-p", "-log", namenode + "/logs");
+        addSrcDstToArgList(argList, skipTmp, namenode + "/destdat", namenode
+            + "/srcdat");
+        ToolRunner.run(new DistCp(conf),
+            argList.toArray(new String[argList.size()]));
         assertTrue("Source and destination directories do not match.",
-                   checkFiles(hdfs, "/destdat", files));
-        FileSystem fs = FileSystem.get(URI.create(namenode+"/logs"), conf);
+            checkFiles(hdfs, "/destdat", files));
+        FileSystem fs = FileSystem.get(URI.create(namenode + "/logs"), conf);
         assertTrue("Log directory does not exist.",
-                    fs.exists(new Path(namenode+"/logs")));
+            fs.exists(new Path(namenode + "/logs")));
 
         FileStatus[] dchkpoint = getFileStatus(hdfs, "/destdat", files);
-        final int nupdate = NFILES>>2;
+        final int nupdate = NFILES >> 2;
         updateFiles(cluster.getFileSystem(), "/srcdat", files, nupdate);
         deldir(hdfs, "/logs");
-
-        ToolRunner.run(new DistCp(conf), new String[] {
-                                         "-p",
-                                         "-update",
-                                         "-log",
-                                         namenode+"/logs",
-                                         namenode+"/srcdat",
-                                         namenode+"/destdat"});
+        argList.clear();
+        // run with update
+        addToArgList(argList, "-p", "-update", "-log", namenode + "/logs");
+        addSrcDstToArgList(argList, skipTmp, namenode + "/destdat", namenode
+            + "/srcdat");
+        ToolRunner.run(new DistCp(conf),
+            argList.toArray(new String[argList.size()]));
         assertTrue("Source and destination directories do not match.",
-                   checkFiles(hdfs, "/destdat", files));
+            checkFiles(hdfs, "/destdat", files));
         assertTrue("Update failed to replicate all changes in src",
-                 checkUpdate(hdfs, dchkpoint, "/destdat", files, nupdate));
+            checkUpdate(hdfs, dchkpoint, "/destdat", files, nupdate));
 
         deldir(hdfs, "/logs");
-        ToolRunner.run(new DistCp(conf), new String[] {
-                                         "-p",
-                                         "-overwrite",
-                                         "-log",
-                                         namenode+"/logs",
-                                         namenode+"/srcdat",
-                                         namenode+"/destdat"});
+        argList.clear();
+        // run with overwrite
+        addToArgList(argList, "-p", "-overwrite", "-log", namenode + "/logs");
+        addSrcDstToArgList(argList, skipTmp, namenode + "/destdat", namenode
+            + "/srcdat");
+        ToolRunner.run(new DistCp(conf),
+            argList.toArray(new String[argList.size()]));
         assertTrue("Source and destination directories do not match.",
-                   checkFiles(hdfs, "/destdat", files));
+            checkFiles(hdfs, "/destdat", files));
         assertTrue("-overwrite didn't.",
-                 checkUpdate(hdfs, dchkpoint, "/destdat", files, NFILES));
+            checkUpdate(hdfs, dchkpoint, "/destdat", files, NFILES));
 
         deldir(hdfs, "/destdat");
         deldir(hdfs, "/srcdat");
         deldir(hdfs, "/logs");
       }
     } finally {
-      if (cluster != null) { cluster.shutdown(); }
+      if (cluster != null) {
+        cluster.shutdown();
+      }
     }
   }
 
-  public void testCopyDfsToDfsUpdateWithSkipCRC() throws Exception {
+  public void testCopyDfsToDfsUpdateOverwrite() throws Exception {
+    testCopyDfsToDfsUpdateOverwrite(false);
+  }
+
+  public void testCopyDfsToDfsUpdateOverwriteSkiptmp() throws Exception {
+    testCopyDfsToDfsUpdateOverwrite(true);
+  }
+
+  private void testCopyDfsToDfsUpdateWithSkipCRC(boolean skipTmp)
+      throws Exception {
     MiniDFSCluster cluster = null;
     try {
       Configuration conf = new Configuration();
       cluster = new MiniDFSCluster(conf, 2, true, null);
       final FileSystem hdfs = cluster.getFileSystem();
       final String namenode = hdfs.getUri().toString();
-      
+
       FileSystem fs = FileSystem.get(URI.create(namenode), new Configuration());
       // Create two files of the same name, same length but different
       // contents
       final String testfilename = "test";
       final String srcData = "act act act";
       final String destData = "cat cat cat";
-      
+
       if (namenode.startsWith("hdfs://")) {
-        deldir(hdfs,"/logs");
-        
+        deldir(hdfs, "/logs");
+
         Path srcPath = new Path("/srcdat", testfilename);
         Path destPath = new Path("/destdat", testfilename);
         FSDataOutputStream out = fs.create(srcPath, true);
@@ -519,17 +564,13 @@ public void testCopyDfsToDfsUpdateWithSkipCRC() throws Exception {
         out = fs.create(destPath, true);
         out.writeUTF(destData);
         out.close();
-        
         // Run with -skipcrccheck option
-        ToolRunner.run(new DistCp(conf), new String[] {
-          "-p",
-          "-update",
-          "-skipcrccheck",
-          "-log",
-          namenode+"/logs",
-          namenode+"/srcdat",
-          namenode+"/destdat"});
-        
+        List<String> argList = new ArrayList<String>();
+        addToArgList(argList, "-p", "-update", "-skipcrccheck", "-log", namenode + "/logs");
+        addSrcDstToArgList(argList, skipTmp, namenode + "/destdat", namenode
+            + "/srcdat");
+        ToolRunner.run(new DistCp(conf),
+            argList.toArray(new String[argList.size()]));
         // File should not be overwritten
         FSDataInputStream in = hdfs.open(destPath);
         String s = in.readUTF();
@@ -537,18 +578,14 @@ public void testCopyDfsToDfsUpdateWithSkipCRC() throws Exception {
         assertTrue("Dest got over written even with skip crc",
             s.equalsIgnoreCase(destData));
         in.close();
-        
         deldir(hdfs, "/logs");
-
-        // Run without the option        
-        ToolRunner.run(new DistCp(conf), new String[] {
-          "-p",
-          "-update",
-          "-log",
-          namenode+"/logs",
-          namenode+"/srcdat",
-          namenode+"/destdat"});
-        
+        argList.clear();
+        // Run without the option
+        addToArgList(argList, "-p", "-update", "-log", namenode + "/logs");
+        addSrcDstToArgList(argList, skipTmp, namenode + "/destdat", namenode
+            + "/srcdat");
+        ToolRunner.run(new DistCp(conf),
+            argList.toArray(new String[argList.size()]));
         // File should be overwritten
         in = hdfs.open(destPath);
         s = in.readUTF();
@@ -561,18 +598,29 @@ public void testCopyDfsToDfsUpdateWithSkipCRC() throws Exception {
         deldir(hdfs, "/destdat");
         deldir(hdfs, "/srcdat");
         deldir(hdfs, "/logs");
-       }
+      }
     } finally {
-      if (cluster != null) { cluster.shutdown(); }
+      if (cluster != null) {
+        cluster.shutdown();
+      }
     }
   }
 
+  public void testCopyDfsToDfsUpdateWithSkipCRC() throws Exception {
+    testCopyDfsToDfsUpdateWithSkipCRC(false);
+  }
+
+  public void testCopyDfsToDfsUpdateWithSkipCRCSkiptmp() throws Exception {
+    testCopyDfsToDfsUpdateWithSkipCRC(true);
+  }
+
   /**
    * A helper function to test copying files between local file system and dfs
-   * file system, with staging area set to local file system. 
+   * file system, with staging area set to local file system.
    */
   private void stagingAreaTest(final FileSystem srcFs, final FileSystem destFs,
-      MiniDFSCluster cluster, Configuration conf) throws Exception {
+      MiniDFSCluster cluster, Configuration conf, boolean skipTmp)
+      throws Exception {
     try {
       final String fileDir = "/files";
       final String srcParent = "/srcdat";
@@ -585,45 +633,44 @@ private void stagingAreaTest(final FileSystem srcFs, final FileSystem destFs,
       URI srcUri = srcFs.getUri();
       URI destUri = destFs.getUri();
 
-      final boolean isSrcLocalFs = srcUri.getScheme().equals(LOCAL_FS_URI.getScheme());
+      final boolean isSrcLocalFs =
+          srcUri.getScheme().equals(LOCAL_FS_URI.getScheme());
 
       final FileSystem localFs = FileSystem.get(LOCAL_FS_URI, conf);
       String prevStagingArea =
           conf.get(JT_STAGING_AREA_ROOT, JT_STAGING_AREA_ROOT_DEFAULT);
-      String newStagingArea = (isSrcLocalFs? source : destination);
+      String newStagingArea = (isSrcLocalFs ? source : destination);
       newStagingArea += "/STAGING";
       conf.set(JT_STAGING_AREA_ROOT, TEST_ROOT_DIR + newStagingArea);
-        
-      final String srcParentPrefix = isSrcLocalFs? TEST_ROOT_DIR : "";
-      final String destParentPrefix = isSrcLocalFs? "" : TEST_ROOT_DIR;
- 
+
+      final String srcParentPrefix = isSrcLocalFs ? TEST_ROOT_DIR : "";
+      final String destParentPrefix = isSrcLocalFs ? "" : TEST_ROOT_DIR;
+
       String createDelSrcParent = srcParentPrefix + srcParent;
       String createDelDestParent = destParentPrefix + destParent;
       String createDelSrc = createDelSrcParent + fileDir;
       String createDelDest = createDelDestParent + fileDir;
-      
+
       MyFile[] srcFiles = createFiles(srcUri, createDelSrc);
       createFiles(destUri, createDelDest);
 
-      String distcpSrc = String.valueOf(srcUri) + createDelSrc;     
+      String distcpSrc = String.valueOf(srcUri) + createDelSrc;
       String distcpDest = String.valueOf(destUri) + createDelDest;
-      
-      ToolRunner.run(new DistCp(conf), new String[] {
-        "-log",
-        LOCAL_FS_STR + logDir,
-        "-update",
-        "-delete",
-        distcpSrc,
-        distcpDest});
-          
-        assertTrue("Source and destination directories do not match.",
-            checkFiles(destFs, createDelDest, srcFiles));
 
-        deldir(localFs, logDir);
-        deldir(srcFs, createDelSrcParent);
-        deldir(destFs, createDelDestParent);
+      List<String> argList = new ArrayList<String>();
+      addToArgList(argList, "-log", LOCAL_FS_STR + logDir, "-update", "-delete");
+      addSrcDstToArgList(argList, skipTmp, distcpDest, distcpSrc);
+      ToolRunner.run(new DistCp(conf),
+          argList.toArray(new String[argList.size()]));
+
+      assertTrue("Source and destination directories do not match.",
+          checkFiles(destFs, createDelDest, srcFiles));
+
+      deldir(localFs, logDir);
+      deldir(srcFs, createDelSrcParent);
+      deldir(destFs, createDelDestParent);
 
-        conf.set(JT_STAGING_AREA_ROOT, prevStagingArea); 
+      conf.set(JT_STAGING_AREA_ROOT, prevStagingArea);
     } finally {
       if (cluster != null) {
         cluster.shutdown();
@@ -635,37 +682,108 @@ private void stagingAreaTest(final FileSystem srcFs, final FileSystem destFs,
    * test copying files from local file system to dfs file system with staging
    * area in src
    */
-  public void testCopyFromLocalToDfsWithStagingAreaInSrc() throws Exception {
+  private void testCopyFromLocalToDfsWithStagingAreaInSrc(boolean skipTmp)
+      throws Exception {
     Configuration conf = new Configuration();
     MiniDFSCluster cluster = new MiniDFSCluster(conf, 2, true, null);
 
     String namenode = FileSystem.getDefaultUri(conf).toString();
-    assertTrue("Name node doesn't start with hdfs://", namenode.startsWith("hdfs://"));
-    
+    assertTrue("Name node doesn't start with hdfs://",
+        namenode.startsWith("hdfs://"));
+
     final FileSystem srcFs = FileSystem.get(LOCAL_FS_URI, conf);
     final FileSystem destFs = cluster.getFileSystem();
-    
-    stagingAreaTest(srcFs, destFs, cluster, conf);
+
+    stagingAreaTest(srcFs, destFs, cluster, conf, skipTmp);
+  }
+
+  public void testCopyFromLocalToDfsWithStagingAreaInSrcSkiptmp()
+      throws Exception {
+    testCopyFromLocalToDfsWithStagingAreaInSrc(true);
+  }
+
+  public void testCopyFromLocalToDfsWithStagingAreaInSrc() throws Exception {
+    testCopyFromLocalToDfsWithStagingAreaInSrc(false);
   }
 
   /**
    * test copying files from dfs file system to local file system with staging
-   * area in dest
+   * area in dest and setting skiptmp flag as needed
    */
-  public void testCopyFromDfsToLocalWithStagingAreaInDest() throws Exception {
+  public void testCopyFromDfsToLocalWithStagingAreaInDest(boolean skipTmp)
+      throws Exception {
     Configuration conf = new Configuration();
     MiniDFSCluster cluster = new MiniDFSCluster(conf, 2, true, null);
-    
+
     String namenode = FileSystem.getDefaultUri(conf).toString();
-    assertTrue("Name node doesn't start with hdfs://", namenode.startsWith("hdfs://"));
-    
+    assertTrue("Name node doesn't start with hdfs://",
+        namenode.startsWith("hdfs://"));
+
     final FileSystem srcFs = cluster.getFileSystem();
     final FileSystem destFs = FileSystem.get(LOCAL_FS_URI, conf);
-    
-    stagingAreaTest(srcFs, destFs, cluster, conf);
+
+    stagingAreaTest(srcFs, destFs, cluster, conf, skipTmp);
+  }
+  
+  
+  /**
+   * test copying files from dfs file system to local file system with staging
+   * area in dest and skiptmp set
+   */
+  public void testCopyFromDfsToLocalWithStagingAreaInDestSkiptmp()
+    throws Exception {
+	testCopyFromDfsToLocalWithStagingAreaInDest(true);
+  }
+
+  /**
+   * test copying files from dfs file system to local file system with staging
+   * area in dest
+   */
+  public void testCopyFromDfsToLocalWithStagingAreaInDest() throws Exception {
+	testCopyFromDfsToLocalWithStagingAreaInDest(false);
+  }
+
+  /**
+   * test copying files from dfs file system to local file system with staging
+   * area in dest. Optionally set skiptmp flag
+   */
+  private void testCopyDuplication(boolean skipTmp) throws Exception {
+    final FileSystem localfs =
+        FileSystem.get(LOCAL_FS_URI, new Configuration());
+    try {
+      MyFile[] files = createFiles(localfs, TEST_ROOT_DIR + "/srcdat");
+      List<String> argList = new ArrayList<String>();
+      addSrcDstToArgList(argList, skipTmp, LOCAL_FS_STR + TEST_ROOT_DIR
+          + "/src2/srcdat", LOCAL_FS_STR + TEST_ROOT_DIR + "/srcdat");
+      ToolRunner.run(new DistCp(new Configuration()),
+          argList.toArray(new String[argList.size()]));
+      assertTrue("Source and destination directories do not match.",
+          checkFiles(localfs, TEST_ROOT_DIR + "/src2/srcdat", files));
+      argList.clear();
+      
+      addSrcDstToArgList(argList, skipTmp, LOCAL_FS_STR + TEST_ROOT_DIR
+          + "/destdat", LOCAL_FS_STR + TEST_ROOT_DIR + "/srcdat",
+          LOCAL_FS_STR + TEST_ROOT_DIR + "/src2/srcdat");
+      assertEquals(
+          DistCp.DuplicationException.ERROR_CODE,
+          ToolRunner.run(new DistCp(new Configuration()),
+              argList.toArray(new String[argList.size()])));
+    } finally {
+      deldir(localfs, TEST_ROOT_DIR + "/destdat");
+      deldir(localfs, TEST_ROOT_DIR + "/srcdat");
+      deldir(localfs, TEST_ROOT_DIR + "/src2");
+    }
   }
 
   public void testCopyDuplication() throws Exception {
+    testCopyDuplication(false);
+  }
+
+  public void testCopyDuplicationSkiptmp() throws Exception {
+    testCopyDuplication(true);
+  }
+
+  public void oldtestCopyDuplication() throws Exception {
     final FileSystem localfs = FileSystem.get(LOCAL_FS_URI, new Configuration());
     try {    
       MyFile[] files = createFiles(localfs, TEST_ROOT_DIR+"/srcdat");
@@ -688,54 +806,70 @@ public void testCopyDuplication() throws Exception {
     }
   }
 
-  public void testCopySingleFile() throws Exception {
+  private void testCopySingleFile(boolean skipTmp) throws Exception {
     FileSystem fs = FileSystem.get(LOCAL_FS_URI, new Configuration());
-    Path root = new Path(TEST_ROOT_DIR+"/srcdat");
-    try {    
-      MyFile[] files = {createFile(root, fs)};
-      //copy a dir with a single file
+    Path root = new Path(TEST_ROOT_DIR + "/srcdat");
+    try {
+      MyFile[] files = { createFile(root, fs) };
+      List<String> argList = new ArrayList<String>();
+      // copy a dir with a single file
+      addSrcDstToArgList(argList, skipTmp, LOCAL_FS_STR + TEST_ROOT_DIR
+          + "/destdat", LOCAL_FS_STR + TEST_ROOT_DIR + "/srcdat");
       ToolRunner.run(new DistCp(new Configuration()),
-          new String[] {LOCAL_FS_STR+TEST_ROOT_DIR+"/srcdat",
-                        LOCAL_FS_STR+TEST_ROOT_DIR+"/destdat"});
+          argList.toArray(new String[argList.size()]));
       assertTrue("Source and destination directories do not match.",
-                 checkFiles(fs, TEST_ROOT_DIR+"/destdat", files));
-      
-      //copy a single file
+          checkFiles(fs, TEST_ROOT_DIR + "/destdat", files));
+      argList.clear();
+      // copy a single file
       String fname = files[0].getName();
       Path p = new Path(root, fname);
       FileSystem.LOG.info("fname=" + fname + ", exists? " + fs.exists(p));
+      addSrcDstToArgList(argList, skipTmp, LOCAL_FS_STR + TEST_ROOT_DIR
+          + "/dest2/" + fname, LOCAL_FS_STR + TEST_ROOT_DIR + "/srcdat/"
+          + fname);
       ToolRunner.run(new DistCp(new Configuration()),
-          new String[] {LOCAL_FS_STR+TEST_ROOT_DIR+"/srcdat/"+fname,
-                        LOCAL_FS_STR+TEST_ROOT_DIR+"/dest2/"+fname});
+          argList.toArray(new String[argList.size()]));
       assertTrue("Source and destination directories do not match.",
-          checkFiles(fs, TEST_ROOT_DIR+"/dest2", files));     
-      //copy single file to existing dir
-      deldir(fs, TEST_ROOT_DIR+"/dest2");
-      fs.mkdirs(new Path(TEST_ROOT_DIR+"/dest2"));
-      MyFile[] files2 = {createFile(root, fs, 0)};
+          checkFiles(fs, TEST_ROOT_DIR + "/dest2", files));
+      argList.clear();
+      // copy single file to existing dir
+      deldir(fs, TEST_ROOT_DIR + "/dest2");
+      fs.mkdirs(new Path(TEST_ROOT_DIR + "/dest2"));
+      MyFile[] files2 = { createFile(root, fs, 0) };
       String sname = files2[0].getName();
+      addToArgList(argList, "-update");
+      addSrcDstToArgList(argList, skipTmp, LOCAL_FS_STR + TEST_ROOT_DIR
+          + "/dest2/", LOCAL_FS_STR + TEST_ROOT_DIR + "/srcdat/" + sname);
       ToolRunner.run(new DistCp(new Configuration()),
-          new String[] {"-update",
-                        LOCAL_FS_STR+TEST_ROOT_DIR+"/srcdat/"+sname,
-                        LOCAL_FS_STR+TEST_ROOT_DIR+"/dest2/"});
+          argList.toArray(new String[argList.size()]));
       assertTrue("Source and destination directories do not match.",
-          checkFiles(fs, TEST_ROOT_DIR+"/dest2", files2));     
-      updateFiles(fs, TEST_ROOT_DIR+"/srcdat", files2, 1);
-      //copy single file to existing dir w/ dst name conflict
+          checkFiles(fs, TEST_ROOT_DIR + "/dest2", files2));
+      updateFiles(fs, TEST_ROOT_DIR + "/srcdat", files2, 1);
+      argList.clear();
+      // copy single file to existing dir w/ dst name conflict
+      addToArgList(argList, "-update");
+      addSrcDstToArgList(argList, skipTmp, LOCAL_FS_STR + TEST_ROOT_DIR
+          + "/dest2/", LOCAL_FS_STR + TEST_ROOT_DIR + "/srcdat/" + sname);
       ToolRunner.run(new DistCp(new Configuration()),
-          new String[] {"-update",
-                        LOCAL_FS_STR+TEST_ROOT_DIR+"/srcdat/"+sname,
-                        LOCAL_FS_STR+TEST_ROOT_DIR+"/dest2/"});
+          argList.toArray(new String[argList.size()]));
       assertTrue("Source and destination directories do not match.",
-          checkFiles(fs, TEST_ROOT_DIR+"/dest2", files2));     
-    }
-    finally {
-      deldir(fs, TEST_ROOT_DIR+"/destdat");
-      deldir(fs, TEST_ROOT_DIR+"/dest2");
-      deldir(fs, TEST_ROOT_DIR+"/srcdat");
+          checkFiles(fs, TEST_ROOT_DIR + "/dest2", files2));
+    } finally {
+      deldir(fs, TEST_ROOT_DIR + "/destdat");
+      deldir(fs, TEST_ROOT_DIR + "/dest2");
+      deldir(fs, TEST_ROOT_DIR + "/srcdat");
     }
   }
 
+  public void testCopySingleFile() throws Exception {
+    testCopySingleFile(false);
+  }
+
+  public void testCopySingleFileWithSkiptmp() throws Exception {
+    testCopySingleFile(true);
+  }
+  
+  
   public void testPreserveOption() throws Exception {
     Configuration conf = new Configuration();
     MiniDFSCluster cluster = null;
diff --git a/hadoop-mapreduce1-project/src/tools/org/apache/hadoop/tools/DistCp.java b/hadoop-mapreduce1-project/src/tools/org/apache/hadoop/tools/DistCp.java
index e7a27b9..d2d7681 100644
--- a/hadoop-mapreduce1-project/src/tools/org/apache/hadoop/tools/DistCp.java
+++ b/hadoop-mapreduce1-project/src/tools/org/apache/hadoop/tools/DistCp.java
@@ -93,6 +93,8 @@
     "\n                       -p alone is equivalent to -prbugp" +
     "\n-i                     Ignore failures" +
     "\n-log <logdir>          Write logs to <logdir>" +
+    "\n-skiptmp               Do not copy files to tmp directory and rename." +
+    "\n                       Instead, copy files directly to the final destination." +
     "\n-m <num_maps>          Maximum number of simultaneous copies" +
     "\n-overwrite             Overwrite destination" +
     "\n-update                Overwrite if src size different from dst size" +
@@ -117,7 +119,14 @@
     "\n     specified with symbolic representation.  For examples," +
     "\n       1230k = 1230 * 1024 = 1259520" +
     "\n       891g = 891 * 1024^3 = 956703965184" +
-    
+
+    "\n\nNOTE 3: By default, distcp copies files to temporary area first, " + 
+    "\n     then renames to the final destination. Using -skiptmp " +
+    "\n     switch means that distcp copies files directly to the " +
+    "\n     destination. Recommend to use it only when you really need to " +
+    "\n     (such as to avoid copy/rename overhead in s3, where rename is " +
+    "\n     not natively supported), because it may cause damage to " +
+    "\n     existing destination file if distcp fails for some reason. " +
     "\n";
   
   private static final long BYTES_PER_MAP =  256 * 1024 * 1024;
@@ -133,7 +142,8 @@
     PRESERVE_STATUS("-p", NAME + ".preserve.status"),
     OVERWRITE("-overwrite", NAME + ".overwrite.always"),
     UPDATE("-update", NAME + ".overwrite.ifnewer"),
-    SKIPCRC("-skipcrccheck", NAME + ".skip.crc.check");
+    SKIPCRC("-skipcrccheck", NAME + ".skip.crc.check"),
+    SKIPTMP("-skiptmp", NAME + ".skip.tmp");
 
     final String cmd, propertyname;
 
@@ -326,6 +336,7 @@ public String toString() {
     private byte[] buffer = null;
     private JobConf job;
     private boolean skipCRCCheck = false;
+    private boolean skipTmp = false;
 
     // stats
     private int failcount = 0;
@@ -381,10 +392,17 @@ private FSDataOutputStream create(Path f, Reporter reporter,
     private void copy(FileStatus srcstat, Path relativedst,
         OutputCollector<WritableComparable<?>, Text> outc, Reporter reporter)
         throws IOException {
-      Path absdst = new Path(destPath, relativedst);
       int totfiles = job.getInt(SRC_COUNT_LABEL, -1);
       assert totfiles >= 0 : "Invalid file count " + totfiles;
 
+      // if we are copying a single file and the dest doesn't exist, we
+      // treat it as a copy/rename. The relativedst becomes the new
+      // filename and the destPath becomes its parent directory.
+      if (totfiles == 1 && !destFileSys.exists(destPath)) {
+        relativedst = new Path(destPath.getName());
+        destPath = destPath.getParent();
+      }
+      Path  absdst = new Path(destPath, relativedst);
       // if a directory, ensure created even if empty
       if (srcstat.isDir()) {
         if (destFileSys.exists(absdst)) {
@@ -443,15 +461,6 @@ else if (!destFileSys.mkdirs(absdst)) {
             + " from " + srcstat.getPath());        
       }
       else {
-        if (totfiles == 1) {
-          // Copying a single file; use dst path provided by user as destination
-          // rather than destination directory, if a file
-          Path dstparent = absdst.getParent();
-          if (!(destFileSys.exists(dstparent) &&
-                destFileSys.getFileStatus(dstparent).isDir())) {
-            absdst = dstparent;
-          }
-        }
         if (destFileSys.exists(absdst) &&
             destFileSys.getFileStatus(absdst).isDir()) {
           throw new IOException(absdst + " is a directory");
@@ -459,7 +468,9 @@ else if (!destFileSys.mkdirs(absdst)) {
         if (!destFileSys.mkdirs(absdst.getParent())) {
           throw new IOException("Failed to create parent dir: " + absdst.getParent());
         }
-        rename(tmpfile, absdst);
+        if (!skipTmp){
+          rename(tmpfile, absdst);
+        }
 
         FileStatus dststat = destFileSys.getFileStatus(absdst);
         if (dststat.getLen() != srcstat.getLen()) {
@@ -529,6 +540,7 @@ public void configure(JobConf job)
       update = job.getBoolean(Options.UPDATE.propertyname, false);
       overwrite = !update && job.getBoolean(Options.OVERWRITE.propertyname, false);
       skipCRCCheck = job.getBoolean(Options.SKIPCRC.propertyname, false);
+      skipTmp = job.getBoolean(Options.SKIPTMP.propertyname, false);
       this.job = job;
     }
 
@@ -653,7 +665,6 @@ static void copy(final Configuration conf, final Arguments args
     LOG.info("destPath=" + args.dst);
 
     JobConf job = createJobConf(conf);
-    
     checkSrcPath(job, args.srcs);
     if (args.preservedAttributes != null) {
       job.set(PRESERVE_STATUS_LABEL, args.preservedAttributes);
@@ -670,7 +681,9 @@ static void copy(final Configuration conf, final Arguments args
       finalize(conf, job, args.dst, args.preservedAttributes);
     } finally {
       //delete tmp
-      fullyDelete(job.get(TMP_DIR_LABEL), job);
+      if(!args.flags.contains(Options.SKIPTMP)) {
+        fullyDelete(job.get(TMP_DIR_LABEL), job);
+      }
       //delete jobDirectory
       fullyDelete(job.get(JOB_DIR_LABEL), job);
     }
@@ -944,7 +957,7 @@ static String makeRelative(Path root, Path absPath) {
    * command line) and at most (distcp.max.map.tasks, default
    * MAX_MAPS_PER_NODE * nodes in the cluster).
    * @param totalBytes Count of total bytes for job
-   * @param job The job to configure
+   * @param job The job configuration
    * @return Count of maps to run.
    */
   private static void setMapCount(long totalBytes, JobConf job) 
@@ -961,9 +974,11 @@ private static void setMapCount(long totalBytes, JobConf job)
   static void fullyDelete(String dir, Configuration conf) throws IOException {
     if (dir != null) {
       Path tmp = new Path(dir);
-      boolean success = tmp.getFileSystem(conf).delete(tmp, true);
-      if (!success) {
-        LOG.warn("Could not fully delete " + tmp);
+      if (tmp.getFileSystem(conf).exists(tmp)) {
+        boolean success = tmp.getFileSystem(conf).delete(tmp, true);
+        if (!success) {
+          LOG.warn("Could not fully delete " + tmp);
+        }
       }
     }
   }
@@ -1015,9 +1030,11 @@ private static boolean setup(Configuration conf, JobConf jobConf,
     //set boolean values
     final boolean update = args.flags.contains(Options.UPDATE);
     final boolean skipCRCCheck = args.flags.contains(Options.SKIPCRC);
+    final boolean skipTmp = args.flags.contains(Options.SKIPTMP);
     final boolean overwrite = !update && args.flags.contains(Options.OVERWRITE);
     jobConf.setBoolean(Options.UPDATE.propertyname, update);
     jobConf.setBoolean(Options.SKIPCRC.propertyname, skipCRCCheck);
+    jobConf.setBoolean(Options.SKIPTMP.propertyname, skipTmp);
     jobConf.setBoolean(Options.OVERWRITE.propertyname, overwrite);
     jobConf.setBoolean(Options.IGNORE_READ_FAILURES.propertyname,
         args.flags.contains(Options.IGNORE_READ_FAILURES));
@@ -1214,9 +1231,10 @@ private static boolean setup(Configuration conf, JobConf jobConf,
           jobfs, jobDirectory, jobConf, conf);
     }
 
-    Path tmpDir = new Path(
-        (dstExists && !dstIsDir) || (!dstExists && srcCount == 1)?
-        args.dst.getParent(): args.dst, "_distcp_tmp_" + randomId);
+    String tmpDirPrefix = (dstExists && !dstIsDir) || (!dstExists && srcCount == 1) ? 
+    		args.dst.getParent().toString() : args.dst.toString();
+    Path tmpDir = new Path(tmpDirPrefix + (skipTmp? "" : "/_distcp_tmp_" + randomId));
+
     jobConf.set(TMP_DIR_LABEL, tmpDir.toUri().toString());
 
     // Explicitly create the tmpDir to ensure that it can be cleaned
-- 
1.7.9.5

